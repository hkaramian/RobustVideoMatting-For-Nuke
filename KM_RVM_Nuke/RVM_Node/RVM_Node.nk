#! C:/Program Files/Nuke13.2v3/nuke-13.2.3.dll -nx
version 13.2 v3
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="0" w="1917" h="981" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1144" stretch="1"/>
            <splitter orientation="2">
                <split size="940"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
            </splitter>
            <split size="725"/>
            <splitter orientation="2">
                <split size="530"/>
                <dock id="" activePageId="Properties.1" focus="true">
                    <page id="Properties.1"/>
                </dock>
                <split size="406"/>
                <dock id="" activePageId="DAG.1">
                    <page id="DAG.1"/>
                </dock>
            </splitter>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name C:/Users/kmwin/Documents/GitHub/RobustVideoMatting-For-Nuke/KM_RVM_Nuke/RVM_Node/RVM_Node.nk
 frame 20
 first_frame 20
 last_frame 40
 lock_range true
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
Group {
 inputs 0
 name KM_RVM
 onCreate "nuke.thisNode()\[\"rvm_node_onCreate\"].setValue(\"True\")\nnuke.thisNode()\[\"text_depend_info\"].setValue(\"Click bellow button to check\")\n\n"
 knobChanged "Plugin_Path = os.environ\['Km_RVM_Plugin_Path']\njson_file = Plugin_Path +\"/params.json\"\nwith open(json_file, 'r') as f:\n    data = json.load(f)\n\n\nif(nuke.thisNode()\[\"pulldown_node_input\"].value()==\"Node Input\"):\n    nuke.thisNode()\[\"text_selectfile\"].setVisible(False)\n    nuke.thisNode()\[\"text_png_only\"].setVisible(False)\n    nuke.thisNode()\[\"filename\"].setVisible(False)\nelse:\n    nuke.thisNode()\[\"text_selectfile\"].setVisible(True)\n    nuke.thisNode()\[\"text_png_only\"].setVisible(True)\n    nuke.thisNode()\[\"filename\"].setVisible(True)\n\n\n# update python path and chunk size if this is a new node , on create\nrvm_node_onCreate = nuke.thisNode()\[\"rvm_node_onCreate\"]\nif (rvm_node_onCreate.value() == \"True\"):\n    rvm_node_onCreate.setValue(\"False\")\n    python_type = data\[\"python_type\"]     \n    if(python_type==\"Miniconda\"):\n        nuke.thisNode()\[\"pulldown_python\"].setValue(\"Miniconda\")\n    else:\n        nuke.thisNode()\[\"pulldown_python\"].setValue(\"Custom\")\n    nuke.thisNode()\[\"filename_python\"].setValue(data\[\"python_path\"])\n    nuke.thisNode()\[\"chunk_size\"].setValue(int(data\[\"chunk_size\"]))\n\nif(nuke.thisNode()\[\"pulldown_python\"].value()==\"Miniconda\"):\n    nuke.thisNode()\[\"filename_python\"].setValue(\"C:/Users/%USERNAME%/miniconda3/envs/km_rvm/python.exe\")\n    nuke.thisNode()\[\"filename_python\"].setEnabled(False)\n    data\[\"python_path\"] = nuke.thisNode()\[\"filename_python\"].getValue()\n    data\[\"python_type\"] = \"Miniconda\"\nelse:\n    nuke.thisNode()\[\"filename_python\"].setEnabled(True)\n    data\[\"python_path\"] = nuke.thisNode()\[\"filename_python\"].getValue()\n    data\[\"python_type\"] = \"Custom\"\n\ndata\[\"chunk_size\"] = str(int(nuke.thisNode()\[\"chunk_size\"].getValue()))\n\nwith open(json_file, \"w\") as file:\n    json.dump(data, file)\nUpdate_Run_cmd_file()\n    \n"
 tile_color 0xbf7fffff
 label "Robust Video\nMatting v1.0\n"
 selected true
 xpos -1262
 ypos -560
 addUserKnob {20 User l "Km Robust Video Matting"}
 addUserKnob {26 title l " " T "<font size='5'><b>   KM Robust Video Matting </b></font> <br>\n"}
 addUserKnob {4 pulldown_node_input l Input M {"Node Input" "File Path" "" "" "" ""}}
 addUserKnob {26 text_selectfile l "<b>Select File</b>" +HIDDEN}
 addUserKnob {26 text_png_only l " " +HIDDEN T "Only PNG seqeunce or .mp4 file is supported "}
 addUserKnob {2 filename l Filepath +HIDDEN}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 text_run l <b>Run</b>}
 addUserKnob {3 chunk_size l "Chunk Size" t "Number of frames for parallel process. Play with this number to get better result base on your hardware"}
 chunk_size 5
 addUserKnob {6 checkbox_gpu l "GPU (CUDA)" +STARTLINE}
 checkbox_gpu true
 addUserKnob {22 btn_run l Run T "import ctypes\nimport glob\nimport json\nimport os\nimport platform\nimport re\nimport shutil\nimport threading\nimport time\n\n\n\nPlugin_Path = os.environ\['Km_RVM_Plugin_Path']\njson_file = Plugin_Path +\"/params.json\"\ncurrent_data_path = nuke.script_directory() + \"/\"+nuke.thisNode().name()+\"_Data\" \nprecomp_temp_dir = current_data_path+\"/Temp/\"\nalpha_output_path = current_data_path + \"/alpha/\" \nref_node = nuke.thisNode() # current node as position reference\ninput_path = precomp_temp_dir\n\n\n\n# Get current node\ncurrent_node = nuke.thisNode()\nframe_range = \"\"\nstart_frame_number = 0\nprocessIsDone = False\nDevice_GPU = False\nInputIsNodeInput = False # input : node input / selected file path\nreadyToRun = False\n\n\n\n# check if GPU\nif(nuke.thisNode()\[\"checkbox_gpu\"].value()):\n    Device_GPU = True\n\n\n\n# check  whether input is node input or selected file path\nif(nuke.thisNode()\[\"pulldown_node_input\"].value()==\"Node Input\"):\n    InputIsNodeInput = True\n\n\n\ndef run_rvm_core() : \n    global processIsDone\n    run_cmd = Plugin_Path+  \"/RVM_Core/Run.cmd\"\n    #print(run_cmd)\n    commands = u'/k ' + r\"\{\}\".format(run_cmd)\n    ctypes.windll.shell32.ShellExecuteW(\n            None,\n            u\"\", #\"runas\"\n            u\"cmd.exe\",\n            commands,\n            None,\n            1\n        )\n\n\n\ndef rvm_status_update():\n    #print(\"start status update thread\")\n    global processIsDone\n    while not processIsDone :\n        #processIsDone = data\[\"process_is_done\"]\n        time.sleep( 1 )\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n        processIsDone = data\[\"process_is_done\"]\n    #print(\"loop ended\")\n    nuke.executeInMainThread( CreateReadNode, args=(start_frame_number) )\n\n\n\n\n# remove old files\nif os.path.exists(precomp_temp_dir):\n    shutil.rmtree(precomp_temp_dir)\nif os.path.exists(current_data_path + \"/alpha/\"):\n    shutil.rmtree(current_data_path + \"/alpha/\")\nif os.path.exists(current_data_path + \"/com/\"):\n    shutil.rmtree(current_data_path + \"/com/\")\nif os.path.exists(current_data_path + \"/fgr/\"):\n    shutil.rmtree(current_data_path + \"/fgr/\")\n\n\n\n\n# chech if project is saved (if it has a project file)\nif nuke.Root().name() == 'Root':\n    nuke.message(\"You need to save the project first.\")\nelse :\n    # Check if current node has an input\n    if InputIsNodeInput:\n        if current_node.inputs() :\n            # Get the frame range of project\n            frame_first = str(int(nuke.root()\[\"first_frame\"].getValue()))\n            frame_last = str(int(nuke.root()\[\"last_frame\"].getValue()))\n            frame_range = frame_first + \"-\"+frame_last\n\n\n\n            # Get frame range from user\n            frames_input = nuke.getFramesAndViews('get range',frame_range)\n            if frames_input : # if get range not cancelled\n                frame_first = int(frames_input\[0].split('-')\[0])\n                frame_last = int(frames_input\[0].split('-')\[1])\n                start_frame_number = frame_first\n                # Render node input to temp dir\n                nuke.execute(nuke.toNode('RVM_Write_Image'), start=frame_first, end=frame_last)\n                readyToRun = True\n        else:\n            nuke.message(\"Node has no input !\")\n    else : # if input is selected file\n        if nuke.thisNode()\[\"filename\"].value() != \"\" :\n            input_path = nuke.thisNode()\[\"filename\"].value()\n            if input_path\[-4:]!= \".mp4\" :\n                input_path = os.path.dirname(input_path) + \"/\"\n            readyToRun = True\n        else:\n            nuke.message(\"filename is empy\")\n\n\n\n\nif readyToRun :\n    # add data path to json file \n    with open(json_file, 'r') as f:\n        data = json.load(f)\n    data\[\"current_data_path\"] = current_data_path\n    data\[\"input_path\"] = input_path\n    data\[\"process_is_done\"] = False\n    data\[\"device_GPU\"] = Device_GPU\n    with open(json_file, \"w\") as file:\n        json.dump(data, file)\n        \n    threading.Thread( None, run_rvm_core).start()\n    threading.Thread( None, rvm_status_update).start()\n\n\n\n\n\ndef CreateReadNode(start_frame_number):\n    global ref_node\n    #print(\"CreateReadNode start\")\n    fileName = alpha_output_path + \"####.png\"\n    isSequence = True\n    readNode = nuke.createNode(\"Read\",inpanel=False)\n    readNode.setXpos(ref_node.xpos())\n    readNode.setYpos(ref_node.ypos() + ref_node.screenHeight() + 50)\n\n\n    # using v!ctor tools code(by Victor Perez ) for creating read node for sequence . https://www.nukepedia.com/gizmos/image/vctor-tools\n    readNode.knob('file').setValue(fileName)\n    cleanPath = nukescripts.replaceHashes(fileName) \n    padRE = re.compile('%0(\\d+)d') \n    padMatch = padRE.search(cleanPath)         \n    if padMatch: \n        padSize = int(padMatch.group(1)) \n        frameList = sorted(glob.iglob(padRE.sub('\[0-9]' * padSize, cleanPath))) \n        first = os.path.splitext(frameList\[0])\[0]\[-padSize:] \n        last = os.path.splitext(frameList\[-1])\[0]\[-padSize:] \n        if platform.system() == \"Windows\":\n            readNode\['file'].fromUserText('%s %s-%s' % (cleanPath, first, last))\n        else : # for linux\n            readNode\['file'].fromUserText(cleanPath)\n            readNode\['first'].setValue(int(nuke.root()\[\"first_frame\"].getValue())) # code above doesn't work properly for linux so we set first & last from project\n            readNode\['last'].setValue(int(nuke.root()\[\"last_frame\"].getValue()))\n            readNode\['origfirst'].setValue(int(nuke.root()\[\"first_frame\"].getValue()))\n            readNode\['origlast'].setValue(int(nuke.root()\[\"last_frame\"].getValue()))\n\n\n\n    readNode.knob('frame_mode').setValue(\"start at\")\n    if InputIsNodeInput:\n        print(str(start_frame_number))\n        readNode.knob('frame').setValue(str(start_frame_number))\n    else:\n        start_frame_number = nuke.getInput('Set Start At Frame', '1')\n        readNode.knob('frame').setValue(str(start_frame_number))\n\n\n    #print(\"start set pos\")\n    # set position\n    #print(\"read node name :\" + readNode.name())\n    #print(\"ref node name :\" + ref_node.name())\n\n\n    #print(\"start create shuffle\")\n    # Create the Shuffle node\n    shuffle2_node = nuke.createNode('Shuffle2',inpanel=False)\n    shuffle2_node\['mappings'].setValue('rgba.red','rgba.green')\n    shuffle2_node\['mappings'].setValue('rgba.red','rgba.blue')\n    shuffle2_node\['mappings'].setValue('rgba.red','rgba.alpha')\n    shuffle2_node.setYpos(readNode.ypos() + readNode.screenHeight() + 30)\n\n\n    #print(\"CreateReadNode end\")\n\n\n" +STARTLINE}
 addUserKnob {26 text_void_space l " " T " "}
 addUserKnob {26 text_output l <b>Output</b>}
 addUserKnob {22 btn_open_dir l "Open Dir" T "import os\nimport platform\nimport subprocess\n\ndef OpenFileOrFolder(path):\n    operatingSystem = platform.system()\n    if os.path.exists(path):\n        if operatingSystem == \"Windows\":\n            os.startfile(path)\n        elif operatingSystem == \"Darwin\":\n            subprocess.Popen(\[\"open\", path])\n        else:\n            subprocess.Popen(\[\"xdg-open\", path])\n\npath = nuke.script_directory() + \"/\"+nuke.thisNode().name()+\"_Data/alpha/\"\nOpenFileOrFolder(path)" +STARTLINE}
 addUserKnob {6 is_processing l "is_processing (for batch render)" +INVISIBLE +STARTLINE}
 addUserKnob {20 Dependencies}
 addUserKnob {6 color_rgba_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 text_1 l "" +STARTLINE T "<font size='5'><b>Check Dependencies </b></font>"}
 addUserKnob {26 text_3 l " " T " "}
 addUserKnob {26 text_2 l "<b> Requirements </b>" T "Python >= 3.9.0 | av >= 8.0.3 | torch >= 1.9.0 <br>\ntorchvision >= 0.10.0 | \ntqdm >= 4.61.1 | \npims >= 0.5 \n<br>"}
 addUserKnob {26 text_depend_info l " <b>Your System </b>" T "Click bellow button to check"}
 addUserKnob {26 text l " " T " "}
 addUserKnob {22 btn_Check l "Check Dependencies" T "import json\nimport os\nimport subprocess\n\n\n\nPlugin_Path = os.environ\['Km_RVM_Plugin_Path']\njson_file = Plugin_Path +\"/params.json\"\n#ssss = \"C:/Users/%USERNAME%/miniconda3/python.exe\"\nwith open(json_file, 'r') as f:\n    data = json.load(f)\npython_path = \"\\\"\" + data\[\"python_path\"] + \"\\\"\"\n\n\n\npython_version = \"\"\npytorch_version = \"\"\ntorchvision_version = \"\"\ntqdm_version = \"\"\npims_version = \"\"\nav_version = \"\"\n# check python \np = subprocess.Popen(python_path +' --version', stdout=subprocess.PIPE, shell=True)\n(output, err) = p.communicate()  \np_status = p.wait()\n\n\n\nif p.returncode == 0: # if python exist\n  python_version = output.decode('utf-8')\n  p = subprocess.Popen(python_path +' -c \"import torch; print(torch.__version__)\"', stdout=subprocess.PIPE, shell=True)\n  (output, err) = p.communicate()  \n  p_status = p.wait()\n  if p.returncode == 0:\n    pytorch_version = output.decode('utf-8')\n  else:\n     pytorch_version = \"not found\"\n  #print(\"pytorch_version: \" + str(pytorch_version))\n  p = subprocess.Popen(python_path +' -c \"import torchvision; print(torchvision.__version__)\"', stdout=subprocess.PIPE, shell=True)\n  (output, err) = p.communicate()  \n  p_status = p.wait()\n  if p.returncode == 0:\n    torchvision_version = output.decode('utf-8')\n  else:\n     torchvision_version = \"not found\"\n  p = subprocess.Popen(python_path +' -c \"import tqdm; print(tqdm.__version__)\"', stdout=subprocess.PIPE, shell=True)\n  (output, err) = p.communicate()  \n  p_status = p.wait()\n  if p.returncode == 0:\n    tqdm_version = output.decode('utf-8')\n  else:\n     tqdm_version = \"not found\"\n  p = subprocess.Popen(python_path +' -c \"import pims; print(pims.__version__)\"', stdout=subprocess.PIPE, shell=True)\n  (output, err) = p.communicate()  \n  p_status = p.wait()\n  if p.returncode == 0:\n    pims_version = output.decode('utf-8')\n  else:\n     pims_version = \"not found\"\n\n\n\n  p = subprocess.Popen(python_path +' -c \"import av; print(av.__version__)\"', stdout=subprocess.PIPE, shell=True)\n  (output, err) = p.communicate()  \n  p_status = p.wait()\n  if p.returncode == 0:\n    av_version = output.decode('utf-8')\n  else:\n     av_version = \"not found\"\nelse:\n  python_version = \"Python not found\"\n  pytorch_version = \"not found\"\n  torchvision_version = \"not found\"\n  tqdm_version = \"not found\"\n  pims_version = \"not found\"\n  av_version = \"not found\"\n\n\n\n\ndependencies_str = \"\"\"<html>\n %s | av %s | torch %s<br> torchvision %s | tqdm %s | pims %s\n\"\"\" % (\n    python_version,\n    av_version,\n    pytorch_version,\n    torchvision_version,\n    tqdm_version,\n    pims_version\n)\n\n\n\n#print(dependencies_str)\nnuke.thisNode()\[\"text_depend_info\"].setValue(dependencies_str)" +STARTLINE}
 addUserKnob {26 text_4 l " " T "(It takes a few seconds to check)"}
 addUserKnob {26 text_Dependencies_Guide l " " T "<br><b>Dependencies Installation Guide : </b><br><br><a style=\"text-decoration:none;color :white\" href=\"https://github.com/hkaramian/RobustVideoMatting-For-Nuke\">github.com/hkaramian/RobustVideoMatting-For-Nuke</a>"}
 addUserKnob {26 ""}
 addUserKnob {4 pulldown_python l Python M {Miniconda Custom "" ""}}
 addUserKnob {2 filename_python l python.exe +DISABLED}
 filename_python C:/Users/%USERNAME%/miniconda3/envs/km_rvm/python.exe
 addUserKnob {26 rvm_node_onCreate -STARTLINE +INVISIBLE T False}
 addUserKnob {20 tab_1 l About}
 addUserKnob {26 credit l "" +STARTLINE T "<font size='5'><b>Km Robust Video Matting </b></font> v1.0\n"}
 addUserKnob {26 ""}
 addUserKnob {26 text_name l " " T "By Hossein Karamian"}
 addUserKnob {26 text_WebSite l WebSite T "<a style=\"color:white;text-decoration:none\" href=\"http://www.hkaramian.com\">www.hkaramian.com</a>"}
 addUserKnob {26 text_Github l Github T "<a style=\"text-decoration:none;color :white\" href=\"https://github.com/hkaramian/RobustVideoMatting-For-Nuke\">github.com/hkaramian/RobustVideoMatting-For-Nuke</a>"}
}
 Read {
  inputs 0
  file_type png
  file "Z:/Km Files/KmWorks/KmTools/Km_AI_Cleaner/Github/Km_AI_Cleaner/Km_AI_Cleaner/Sample/Km_AI_Cleaner2_Data/Result/result_%05d.png"
  format "512 512 0 0 512 512 1 square_512"
  first 15
  last 40
  origfirst 15
  origlast 40
  origset true
  version 113
  in_colorspace scene_linear
  out_colorspace scene_linear
  name Read_result
  xpos 159
  ypos 50
 }
set N90ee4000 [stack 0]
 NoOp {
  name Result
  xpos 159
  ypos 176
 }
 Input {
  inputs 0
  name InputInput
  xpos 0
  ypos -143
 }
 Dot {
  name Dot3
  xpos 34
  ypos -11
 }
set N90ee5000 [stack 0]
 Switch {
  inputs 2
  name Switch_output
  xpos 0
  ypos 176
 }
 Output {
  name Output1
  xpos 0
  ypos 332
 }
push $N90ee4000
push $N90ee5000
 Switch {
  inputs 2
  name Switch_iteration
  xpos 159
  ypos -14
 }
push $N90ee5000
 Write {
  file "\[python \{nuke.script_directory() + \"/\"+nuke.thisGroup().name()+\"_Data\"\}]/Temp/Input_image_#####.png"
  file_type png
  datatype "16 bit"
  create_directories true
  checkHashOnRead false
  version 211
  in_colorspace scene_linear
  out_colorspace scene_linear
  name RVM_Write_Image
  selected true
  xpos -187
  ypos -20
 }
end_group
